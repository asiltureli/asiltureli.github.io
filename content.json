{"posts":[{"title":"The danger of combining GMock with Catch2","text":"Recently I stumbled upon a problem at work, as I was writing unit tests. The tests were not failing even though they were supposed to fail. First I thought that I did something wrong in my mock classes but later it turned out differently. Catch2 is a great BDD (Behavior Driving Development) framework for C++, however it lacks a main functionality; Mocking. Therefore it would be useful to deploy GMock at this point. However this comes with a great danger. In this post I want to write about the danger and possible pitfall of combining GMock with Catch2 or possibly any other unit testing framework. One might thing: why not GoogleTest? The question is understandable but GTest does not offer BDD. It is designed to write TDD tests. Therefore it is a combination, which makes completely sense. I will share the complete code in my repository. Writing a very basic mockLet’s start with a very basic class and the mock for this class: 12345678910class ClassToTest{public: virtual void some_call(){};};class MockClass : public ClassToTest{public: MOCK_METHOD(void, some_call, (), (override));}; This should be pretty straight-forward. We have a class we want to test, which is ClassToTest and the corresponding mock class MockClass. And let’s add a caller for that class: 12345678class SimpleWrapper{public: SimpleWrapper() = delete; SimpleWrapper(ClassToTest&amp; sc) : m_obj { sc }{}; void call(){m_obj.some_call();};private: ClassToTest&amp; m_obj;}; Now we are ready to test our class. Writing and running some tests in Catch2In this phase we can write some tests to check our class with Catch2. Here are some very minimal tests: 1234567891011121314151617using namespace ::testing;TEST_CASE(&quot;Strict Mock Test&quot;){ auto mock = StrictMock&lt;MockClass&gt;(); auto caller = SimpleWrapper(mock); caller.call();}TEST_CASE(&quot;Expect call&quot;){ auto mock = NiceMock&lt;MockClass&gt;(); auto caller = SimpleWrapper(mock); EXPECT_CALL(mock, some_call()).Times(100); caller.call();} In the first test case we define a StrictMock and don’t set any expectations. However we call our function through our SimpleWrapper. The strict mock should report us the unexpected e.g. uninteresting call as an error. Therefore this is obviously a failed test case. In the second test case we define a NiceMock, which doesn`t have any effect on our test case. The goal in this case to set an expectation on some_call. We expect that our function gets called 100 times in this scope. However we call it only once. This is again an obvious failed test case. Lets run our tests which should obviously fail:","link":"/2024/11/22/gmockcatch2danger/"}],"tags":[{"name":"C++","slug":"C","link":"/tags/C/"}],"categories":[],"pages":[{"title":"About","text":"About meI am currently a Software Developer at Rohde &amp; Schwarz Cybersecurity in Berlin, participating in development of Layer-2 based network encryption systems for protecting govermental and critical infrastructes. My previous works at other companies and current work mainly consist of the C++ components and the build/meta-build system(CMake). But I also want to get my hands dirty with our linux kernel later. Before that I studied B.Sc.and M.Sc Computer Engineering at RWTH Aachen, with a focus on Deep Learning. Outside of the work I try to try out new technologies and implement the existing stack from scratch. This website mostly serves as a diary to share the things I am working on in my free time. If you want to ask/discuss about anything I share or contact me for any reason, you can always reach via Linkedin.","link":"/about/index.html"}]}